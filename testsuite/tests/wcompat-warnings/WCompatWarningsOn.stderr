
Template.hs:9:5: warning: [-Wmissing-monadfail-instances (in -Wcompat)]
    • Could not deduce (Control.Monad.Fail.MonadFail m)
        arising from the failable pattern ‘Just _’
        (this will become an error in a future GHC release)
      from the context: Monad m
        bound by the type signature for:
                   monadFail :: forall (m :: * -> *) a. Monad m => m a
        at Template.hs:7:1-27
      Possible fix:
        add (Control.Monad.Fail.MonadFail m) to the context of
          the type signature for:
            monadFail :: forall (m :: * -> *) a. Monad m => m a
    • In a stmt of a 'do' block: Just _ <- undefined
      In the expression:
        do Just _ <- undefined
           undefined
      In an equation for ‘monadFail’:
          monadFail
            = do Just _ <- undefined
                 undefined

Template.hs:12:1: warning: [-Wsemigroup (in -Wcompat)]
    Local definition of ‘<>’ clashes with a future Prelude name.
    This will become an error in a future release.

Template.hs:18:3: warning: [-Wnoncanonical-monoid-instances (in -Wcompat)]
    Noncanonical ‘(<>) = mappend’ definition detected
    in the instance declaration for ‘Semigroup S’.
    Move definition from ‘mappend’ to ‘(<>)’

Template.hs:21:3: warning: [-Wnoncanonical-monoid-instances (in -Wcompat)]
    Noncanonical ‘mappend’ definition detected
    in the instance declaration for ‘Monoid S’.
    Define as ‘mappend = (<>)’

Template.hs:25:15: warning: [-Wstar-is-type (in -Wcompat)]
    Using ‘*’ (or its Unicode variant) to mean ‘Data.Kind.Type’
    relies on the StarIsType extension, which will become
    deprecated in the future.
    Suggested fix: use ‘Type’ from ‘Data.Kind’ instead.
